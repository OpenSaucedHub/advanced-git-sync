# ============================================================================
# Gitpod Configuration for Advanced Git Sync
# ============================================================================
#
# This configuration provides a comprehensive development environment for the
# advanced-git-sync project, which synchronizes GitHub repositories with GitLab
# including branches, PRs, and issues.
#
# FEATURES:
# - Ubuntu-based workspace with Bun runtime pre-installed
# - Essential VS Code extensions for TypeScript/Node.js development
# - Automated dependency installation and build process
# - Pre-configured development environment variables
# - Multiple terminal tasks for different development workflows
# - Port forwarding for development servers
#
# QUICK START:
# 1. Open this repository in Gitpod
# 2. Wait for the initialization to complete (~2-3 minutes)
# 3. Use the available bun commands for development:
#    - bun run build       : Build the project
#    - bun run dev:sync    : Run development sync
#    - bun run test        : Run tests
#    - bun run lint        : Check code quality
#
# DOCUMENTATION:
# - Project docs: ./docs/
# - Configuration: ./docs/sync-config-example.yml
# - Contributing: ./docs/contributing.md
# ============================================================================

# Use a custom Docker image with Ubuntu and Bun pre-installed
# This matches the devcontainer configuration
image: ghcr.io/iamvikshan/devcontainers/ubuntu-bun:latest

# VS Code extensions configuration
# Mapped from the devcontainer.json extensions
vscode:
  extensions:
    - dbaeumer.vscode-eslint # ESLint for code linting
    - esbenp.prettier-vscode # Prettier for code formatting
    - eamodio.gitlens # GitLens for Git integration
    - oven.bun-vscode # Bun language support
    - christian-kohler.npm-intellisense # NPM IntelliSense
    - wakatime.vscode-wakatime # Time tracking (optional)
    - usernamehw.errorlens # Error highlighting
    - ms-vscode.vscode-typescript-next # Latest TypeScript support

# Environment variables for development
env:
  NODE_ENV: development
  FORCE_COLOR: "1"
  # Default config path for development
  CONFIG_PATH: ".github/sync-config.yml"
  # Enable debug logging during development
  DEBUG: "sync:*"

# Git configuration for better development experience
gitConfig:
  init.defaultBranch: main
  pull.rebase: "false"
  core.autocrlf: input

# Port configuration for development servers
ports:
  - name: Development Server
    port: 3000
    onOpen: open-preview
    visibility: public
  - name: Test Server
    port: 8080
    onOpen: notify
    visibility: private

# Tasks configuration for workspace initialization and development
tasks:
  # Primary development task
  - name: Setup & Install Dependencies
    init: |
      echo "üöÄ Setting up advanced-git-sync development environment..."

      # Ensure we have the latest packages
      bun install

      # Run any setup scripts
      bun run sync-deps

      # Initial build to ensure everything works
      bun run build

      echo "‚úÖ Setup complete! You can now run 'bun run dev:sync' to start development."

    command: |
      echo "üí° Available commands:"
      echo "  - bun run build       : Build the project"
      echo "  - bun run lint        : Run ESLint"
      echo "  - bun run test        : Run tests"
      echo "  - bun run f           : Format code with Prettier"
      echo "  - bun run dev:sync    : Development sync"
      echo "  - bun run dev:config  : Edit configuration"
      echo ""
      echo "üìÅ Key files:"
      echo "  - src/index.ts        : Main entry point"
      echo "  - action.yml          : GitHub Action definition"
      echo "  - docs/               : Documentation"
      echo ""
      echo "üîß Development environment is ready!"

  # Secondary task for running tests in watch mode
  - name: Test Watcher
    openMode: tab-after
    command: |
      echo "üß™ Starting test watcher..."
      echo "This will run tests automatically when files change."
      echo "Press Ctrl+C to stop the watcher."
      # Note: Add watch mode when available
      echo "Run 'bun run test' manually for now."

  # Third task for linting and formatting
  - name: Code Quality
    openMode: tab-after
    command: |
      echo "üìù Code Quality Tools:"
      echo "  - Run 'bun run lint' to check for linting issues"
      echo "  - Run 'bun run f' to format code with Prettier"
      echo "  - ESLint and Prettier are configured and ready to use"

  # Fourth task for configuration setup
  - name: Configuration Helper
    openMode: tab-after
    before: |
      # Create sample configuration if it doesn't exist
      if [ ! -f ".github/sync-config.yml" ]; then
        mkdir -p .github
        if [ -f "docs/sync-config-example.yml" ]; then
          cp docs/sync-config-example.yml .github/sync-config.yml
          echo "üìã Created sample configuration at .github/sync-config.yml"
        fi
      fi
    command: |
      echo "‚öôÔ∏è  Configuration Management:"
      echo "  - Edit .github/sync-config.yml for sync settings"
      echo "  - See docs/sync-config-example.yml for examples"
      echo "  - Run 'bun run dev:config' for configuration help"
      echo ""
      echo "üîê Token Setup (for testing):"
      echo "  - Set GITHUB_TOKEN in environment"
      echo "  - Set GITLAB_TOKEN in environment"
      echo "  - See docs/token-setup.md for detailed instructions"
